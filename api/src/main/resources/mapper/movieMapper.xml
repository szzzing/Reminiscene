<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="movieMapper">

    <select id="selectOneStatus" resultMap="statusResultMap">
        select
            ifnull((select rate_star from rate where rate_user_id=#{userId} and rate_movie_id=#{movieId}), 0) status_rate,
            (select count(*) from comment where comment_user_id=#{userId} and comment_movie_id=#{movieId})>0 status_is_comment,
            (select count(*) from watching where watching_user_id=#{userId} and watching_movie_id=#{movieId})>0 status_is_watching,
            (select count(*) from wish where wish_user_id=#{userId} and wish_movie_id=#{movieId})>0 status_is_wish
        from dual
    </select>

    <insert id="insertOneRate">
        insert into rate
        values(#{movieId}, #{userId}, #{star}, default)
    </insert>

    <update id="updateOneRate">
        update rate
        set rate_star = #{star}, rate_cre_date = current_timestamp
        where rate_movie_id = #{movieId} and rate_user_id = #{userId}
    </update>

    <delete id="deleteOneRate">
        delete from rate
        where rate_movie_id = #{movieId} and rate_user_id = #{userId}
    </delete>


    <insert id="insertOneWish">
        insert into wish
        values(#{movieId}, #{userId}, default)
    </insert>

    <delete id="deleteOneWish">
        delete from wish
        where wish_movie_id = #{movieId} and wish_user_id = #{userId}
    </delete>


    <insert id="insertOneWatching">
        insert into watching
        values(#{movieId}, #{userId}, default)
    </insert>

    <delete id="deleteOneWatching">
        delete from watching
        where watching_movie_id = #{movieId} and watching_user_id = #{userId}
    </delete>

    <select id="selectWishList" resultMap="movieResultMap">
        select w.*, m.*
        from wish w
            join movie m on wish_movie_id = movie_id
        <choose>
            <when test="userId!=null">
                where wish_user_id=#{userId}
            </when>
            <when test="movieId!=null">
                where wish_movie_id=#{movieId}
            </when>
        </choose>
        order by wish_cre_date desc
        limit #{limit} offset #{offset}
    </select>

    <select id="selectWatchingList" resultMap="movieResultMap">
        select w.*, m.*
        from watching w
            join movie m on watching_movie_id = movie_id
        <choose>
            <when test="userId!=null">
                where watching_user_id=#{userId}
            </when>
            <when test="movieId!=null">
                where watching_movie_id=#{movieId}
            </when>
        </choose>
        order by watching_cre_date desc
        limit #{limit} offset #{offset}
    </select>

    <insert id="insertOneMovie">
        insert into movie
        values(default, #{title}, #{originalTitle}, #{tagline}, #{overview}, #{releaseDate}, #{backdropPath}, #{posterPath}, #{genre}, #{runtime})
    </insert>

    <select id="selectMovieList" resultMap="movieResultMap">
        select m.*,
           (select avg(rate_star) from rate where rate_movie_id = movie_id) avg_rate
        from movie m
        <if test="query!=null">
            where (movie_title like concat('%',#{query},'%')
            or movie_original_title like concat('%',#{query},'%'))
            or pandora3_ojt.fn_initial_search_trim(movie_title) like concat('%', #{query},'%')
            or pandora3_ojt.fn_initial_search_trim(movie_original_title) like concat('%', #{query},'%')
        </if>
        limit #{limit} offset #{offset}
    </select>

    <select id="selectMonthBestMovieList" resultMap="movieResultMap">
        select m.*,
            (select avg(rate_star) from rate where rate_movie_id = movie_id) avg_rate,
            (select count(*) from comment where comment_movie_id = movie_id and comment_cre_date >= date_add(now(), interval -1 month)) comment_count,
            (select count(*) from wish where wish_movie_id = movie_id and wish_cre_date >= date_add(now(), interval -1 month)) wish_count,
            (select count(*) from watching where watching_movie_id = movie_id and watching_cre_date >= date_add(now(), interval -1 month)) watching_count,
            (select count(*) from rate where rate_movie_id = movie_id and rate_cre_date >= date_add(now(), interval -1 month)) rate_count
        from movie m
        order by (comment_count+wish_count+watching_count+rate_count) desc, movie_id desc
        limit 6 offset 0
    </select>

    <select id="selectBestRateMovieList" resultMap="movieResultMap">
        select m.*,
            (select avg(rate_star) from rate where rate_movie_id = movie_id) avg_rate,
            (select count(*) from rate where rate_movie_id = movie_id) rate_count
        from movie m
        order by rate_count desc, avg_rate desc, movie_id desc
            limit 6 offset 0
    </select>

    <select id="selectOneMovie" resultMap="movieResultMap">
        select m.*,
           round((select avg(rate_star) from pandora3_ojt.rate where rate_movie_id = movie_id), 2) as avg_rate,
           (select count(rate_star) from pandora3_ojt.rate where rate_movie_id = movie_id) as rate_count,
           (select count(*) from pandora3_ojt.wish where wish_movie_id = movie_id) as wish_count,
           (select count(*) from pandora3_ojt.watching where watching_movie_id = movie_id) as watching_count
        from movie m
        where movie_id=#{id}
    </select>


    <resultMap id="movieResultMap" type="com.szzzing.api.dto.movie.MovieDto">
        <id column="movie_id" property="id"/>
        <result column="movie_title" property="title"/>
        <result column="movie_original_title" property="originalTitle"/>
        <result column="movie_tagline" property="tagline"/>
        <result column="movie_overview" property="overview"/>
        <result column="movie_release_date" property="releaseDate"/>
        <result column="movie_backdrop_path" property="backdropPath"/>
        <result column="movie_poster_path" property="posterPath"/>
        <result column="movie_genre" property="genre"/>
        <result column="movie_runtime" property="runtime"/>
        <result column="avg_rate" property="avgRate"/>
        <result column="rate_count" property="rateCount"/>
        <result column="wish_count" property="wishCount"/>
        <result column="watching_count" property="watchingCount"/>
    </resultMap>

    <resultMap id="statusResultMap" type="com.szzzing.api.dto.movie.StatusDto">
        <result column="status_rate" property="rate"/>
        <result column="status_is_comment" property="isComment"/>
        <result column="status_is_watching" property="isWatching"/>
        <result column="status_is_wish" property="isWish"/>
    </resultMap>

    <resultMap id="wishResultMap" type="com.szzzing.api.dto.movie.WishDto">
        <result column="wish_movie_id" property="movieId"/>
        <result column="wish_user_id" property="userId"/>
    </resultMap>

    <resultMap id="watchingResultMap" type="com.szzzing.api.dto.movie.WatchingDto">
        <result column="watching_movie_id" property="movieId"/>
        <result column="watching_user_id" property="userId"/>
    </resultMap>
</mapper>