<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="userMapper">

    <insert id="insertOne">
        insert into user
        values(#{id}, #{pw}, #{nickname}, #{email}, #{role}, default, #{type}, #{birthday}, #{gender}, default, default, null, fn_initial_search_trim(#{nickname}))
    </insert>

    <select id="selectAll" resultMap="userResultMap">
        select * from user
        where user_role='U' and user_enable = true
    </select>

    <select id="selectOneById" resultMap="userResultMap">
        select u.*,
            (select count(*) from wish where wish_user_id=#{id}) as user_wish_count,
            (select count(*) from watching where watching_user_id=#{id}) as user_watching_count,
            (select count(*) from reminiscene.like where like_user_id=#{id}) as user_like_count,
            (select count(*) from comment where comment_user_id=#{id}) as user_comment_count,
            round((select avg(rate_star) from rate where rate_user_id = #{id}), 1) user_avg_rate
        from user u
        where binary user_id=#{id} and user_enable=true
    </select>

    <select id="selectOneByEmail" resultMap="userResultMap">
        select * from user
        where binary user_email=#{email}
    </select>

    <select id="selectOneByIdEmail" resultMap="userResultMap">
        select * from user
        where binary user_id=#{id} and user_email=#{email}
    </select>

    <select id="selectCountById" resultType="_int">
        select count(*) from user
        where binary user_id=#{id}
    </select>

    <select id="selectCountByNickname" resultType="_int">
        select count(*) from user
        where user_nickname=#{nickname}
            and user_enable=true
        <if test="loginUser!=null">
            and binary user_id!=#{loginUser}
        </if>
    </select>

    <select id="selectCountByEmail" resultType="_int">
        select count(*) from user
        where user_email=#{email}
            and user_enable=true
        <if test="loginUser!=null">
            and binary user_id!=#{loginUser}
        </if>
    </select>

    <update id="updateOne">
        update user
        set user_nickname = #{nickname},
            user_email = #{email},
            user_gender = #{gender},
            user_birthday = #{birthday},
            user_mod_date = current_timestamp,
            user_profile_image = #{newImage},
            user_nickname_initial = fn_initial_search_trim(#{nickname})
        where binary user_id = #{id}
    </update>

    <update id="updateOnePw">
        update user
        set user_pw = #{pw},
            user_mod_date = current_timestamp
        where binary user_id = #{id}
    </update>

    <update id="updateOneEnable">
        update user
        set user_enable = false
        where binary user_id = #{id}
    </update>

    <select id="selectUserList" resultMap="userResultMap">
        select user_id, user_email, user_nickname, user_gender, user_birthday, user_profile_image,
                (select count(*) from comment where comment_user_id = user_id) as user_comment_count,
                round((select avg(rate_star) from rate where rate_user_id = user_id), 1) user_avg_rate
        from user
        where user_enable = true and user_role='U'
            <if test="query!=null">
                and
                (user_id like concat('%',#{query},'%')
                or user_nickname like concat('%',#{query},'%')
                or fn_initial_search_trim(user_id) like concat('%', #{query},'%')
                or fn_initial_search_trim(user_nickname) like concat('%', #{query},'%'))
                order by CHAR_LENGTH(user_nickname)
            </if>
        limit #{limit} offset #{offset}
    </select>

    <resultMap id="userResultMap" type="com.szzzing.api.dto.user.UserDto">
        <id column="user_id" property="id"/>
        <result column="user_pw" property="pw"/>
        <result column="user_email" property="email"/>
        <result column="user_nickname" property="nickname"/>
        <result column="user_role" property="role"/>
        <result column="user_enable" property="enable"/>
        <result column="user_gender" property="gender"/>
        <result column="user_type" property="type"/>
        <result column="user_birthday" property="birthday"/>
        <result column="user_reg_date" property="regDate"/>
        <result column="user_mod_date" property="modDate"/>
        <result column="user_profile_image" property="profileImage"/>
        <result column="user_wish_count" property="wishCount"/>
        <result column="user_watching_count" property="watchingCount"/>
        <result column="user_like_count" property="likeCount"/>
        <result column="user_comment_count" property="commentCount"/>
        <result column="user_avg_rate" property="avgRate"/>
    </resultMap>
</mapper>